/*  import "ms-dtyp.idl"; */


 
typedef int BOOL, *PBOOL, *LPBOOL;
typedef unsigned char BYTE, *PBYTE, *LPBYTE;
typedef BYTE BOOLEAN, *PBOOLEAN;
typedef wchar_t WCHAR, *PWCHAR;
typedef WCHAR* BSTR;
typedef char CHAR, *PCHAR;
typedef double DOUBLE;
typedef unsigned long DWORD, *PDWORD, *LPDWORD;
typedef unsigned int DWORD32;
typedef __int64 DWORD64;
typedef unsigned __int64 ULONGLONG;
typedef ULONGLONG DWORDLONG, *PDWORDLONG;
typedef unsigned long error_status_t;
typedef float FLOAT;
typedef unsigned char UCHAR, *PUCHAR;
typedef short SHORT;

typedef void *HANDLE;  
typedef DWORD HCALL;
typedef DWORD HRESULT;
typedef int INT, *LPINT;
typedef signed char INT8;
typedef signed short INT16;
typedef signed int INT32;
typedef __int64 INT64;
typedef const wchar_t* LMCSTR; 
typedef WCHAR* LMSTR;
typedef long LONG, *PLONG, *LPLONG;
typedef INT64 LONGLONG;

#ifdef _WIN64
 typedef __int64 LONG_PTR;
#else
 typedef LONG LONG_PTR;
#endif

typedef signed int LONG32;
typedef signed __int64 LONG64;
typedef const char* LPCSTR;

#ifdef Unicode
  typedef const wchar_t* LPCTSTR;
#else
  typedef const char* LPCTSTR;
#endif

typedef const wchar_t* LPCWSTR;
typedef char* PSTR, *LPSTR;

#ifdef Unicode
  typedef WCHAR* LPTSTR;
#else
  typedef CHAR* LPTSTR;
#endif

typedef wchar_t* LPWSTR, *PWSTR;
typedef DWORD NET_API_STATUS;
typedef long NTSTATUS;
typedef [context_handle] void * PCONTEXT_HANDLE, *PPCONTEXT_HANDLE;  
typedef unsigned __int64 QWORD;
typedef void* RPC_BINDING_HANDLE;
typedef UCHAR* STRING;

#ifdef Unicode
  typedef WCHAR TCHAR;
#else
  typedef CHAR TCHAR;
#endif

typedef __int64 TIME;
typedef unsigned int UINT;
typedef unsigned char UINT8;
typedef unsigned short UINT16;
typedef unsigned int UINT32;
typedef unsigned __int64 UINT64;
typedef unsigned long ULONG, *PULONG;

#ifdef _WIN64

typedef unsigned __int64 ULONG_PTR;

#else

typedef ULONG ULONG_PTR;

#endif

typedef ULONG_PTR DWORD_PTR;
typedef ULONG_PTR SIZE_T;
typedef unsigned int ULONG32;
typedef unsigned __int64 ULONG64;
typedef wchar_t UNICODE;
typedef unsigned short USHORT;
typedef void VOID, *PVOID;
typedef unsigned short WORD, *PWORD, *LPWORD;


typedef struct _FILETIME {
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
} FILETIME, 
 *PFILETIME, 
 *LPFILETIME;

typedef struct _GUID {
  unsigned long Data1;
  unsigned short Data2;
  unsigned short Data3;
  byte Data4[8];
} GUID, 
  UUID, 
 *PGUID;

typedef struct _LARGE_INTEGER {
    __int64 QuadPart;
} LARGE_INTEGER, *PLARGE_INTEGER;

typedef DWORD LCID;

typedef struct _RPC_UNICODE_STRING {
  unsigned short Length;
  unsigned short MaximumLength;
  [size_is(MaximumLength/2), length_is(Length/2)] 
    WCHAR* Buffer;
} RPC_UNICODE_STRING, 
 *PRPC_UNICODE_STRING;

typedef struct _SYSTEMTIME {
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
} SYSTEMTIME, 
 *PSYSTEMTIME;

typedef struct _UINT128 {
  UINT64 lower;
  UINT64 upper;
} UINT128, 
 *PUINT128;

typedef struct _ULARGE_INTEGER {
    unsigned __int64 QuadPart;
} ULARGE_INTEGER, *PULARGE_INTEGER;

typedef struct _UNICODE_STRING {
  USHORT Length;
  USHORT MaximumLength;
  [size_is(MaximumLength/2), length_is(Length/2)] 
    WCHAR* Buffer;
} UNICODE_STRING, 
 *PUNICODE_STRING;

typedef struct _SID_IDENTIFIER_AUTHORITY {
  BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY;

typedef struct _ACCESS_MASK {
  unsigned long ACCESS_MASK;
} ACCESS_MASK, 
 *PACCESS_MASK;

typedef struct _ACE_HEADER {
  UCHAR AceType;
  UCHAR AceFlags;
  USHORT AceSize;
} ACE_HEADER, 
 *PACE_HEADER;

typedef struct _ACCESS_ALLOWED_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD SidStart;
} ACCESS_ALLOWED_ACE, 
 *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_ALLOWED_OBJECT_ACE {  
  ACE_HEADER Header;
  ACCESS_MASK Mask ;
  DWORD Flags ;
  GUID ObjectType;
  GUID InheritedObjectType;
  DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, 
 *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD SidStart;
} ACCESS_DENIED_ACE, 
 *PACCESS_DENIED_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask ;
  DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_ACE, 
 *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask ;
  DWORD SidStart;
} ACCESS_DENIED_CALLBACK_ACE, 
 *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask ;
  DWORD Flags ;
  GUID ObjectType;
  GUID InheritedObjectType;
  DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, 
 *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask ;
  DWORD Flags ;
  GUID ObjectType;
  GUID InheritedObjectType;
  DWORD SidStart;
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, 
 *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask ;
  DWORD SidStart;
} SYSTEM_AUDIT_ACE, 
 *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask ;
  DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_ACE, 
 *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask ;
  DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, 
 *PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
  ACE_HEADER Header;
  ACCESS_MASK Mask ;
  DWORD Flags ;
  GUID ObjectType;
  GUID InheritedObjectType;
  DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, 
 *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _ACL {
  UCHAR AclRevision;
  UCHAR Sbz1;
  USHORT AclSize;
  USHORT AceCount;
  USHORT Sbz2;
} ACL, 
 *PACL;

typedef struct _SECURITY_DESCRIPTOR {
  UCHAR Revision;
  UCHAR Sbz1;
  USHORT Control;
  ULONG Owner;
  ULONG Group;
  ULONG Sacl;
  ULONG Dacl;
} SECURITY_DESCRIPTOR, 
 *PSECURITY_DESCRIPTOR;

typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;

typedef struct _RPC_SID {
  unsigned char Revision;
  unsigned char SubAuthorityCount;
  SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  [size_is(SubAuthorityCount)] unsigned long SubAuthority[];
} RPC_SID, 
 *PRPC_SID;



  [
       uuid(12345678-1234-ABCD-EF00-01234567CFFB),
       version(1.0),
       ms_union,
       pointer_default(unique)
  ]
  interface logon
  {
       typedef struct _STRING
       {
           unsigned short Length;
           unsigned short MaximumLength;
           [size_is(MaximumLength), length_is(Length) ] char * Buffer;
       } STRING, *PSTRING;
       typedef struct _OLD_LARGE_INTEGER
       {
           unsigned long LowPart;
           long HighPart;
       } OLD_LARGE_INTEGER, *POLD_LARGE_INTEGER;
           typedef struct _CYPHER_BLOCK
       {
           char data[8];
       } CYPHER_BLOCK, *PCYPHER_BLOCK;
       typedef struct _NT_OWF_PASSWORD{
         CYPHER_BLOCK data[2];
       } NT_OWF_PASSWORD,
         *PNT_OWF_PASSWORD,
         ENCRYPTED_NT_OWF_PASSWORD,
         *PENCRYPTED_NT_OWF_PASSWORD;
       typedef struct _LM_OWF_PASSWORD{
         CYPHER_BLOCK data[2];
       } LM_OWF_PASSWORD,
         *PLM_OWF_PASSWORD,
         ENCRYPTED_LM_OWF_PASSWORD,
         *PENCRYPTED_LM_OWF_PASSWORD;
       typedef DWORD NET_API_STATUS;
       typedef [handle] wchar_t * LOGONSRV_HANDLE;
       typedef struct _NLPR_SID_INFORMATION
       {
           PSID SidPointer;
       } NLPR_SID_INFORMATION, *PNLPR_SID_INFORMATION;
       typedef struct _NLPR_SID_ARRAY
       {
           unsigned long Count;
           [size_is(Count)] PNLPR_SID_INFORMATION Sids;
       } NLPR_SID_ARRAY, *PNLPR_SID_ARRAY;
       typedef struct _NLPR_CR_CIPHER_VALUE
       {
           unsigned long Length;
           unsigned long MaximumLength;
           [size_is(MaximumLength), length_is(Length)]
                 unsigned char * Buffer;
       } NLPR_CR_CIPHER_VALUE, *PNLPR_CR_CIPHER_VALUE;
       typedef struct _NLPR_LOGON_HOURS {
           unsigned short UnitsPerWeek;
           [size_is(1260), length_is((UnitsPerWeek + 7)/8)]
                 unsigned char* LogonHours;
       } NLPR_LOGON_HOURS,
        *PNLPR_LOGON_HOURS;
       typedef struct _NLPR_USER_PRIVATE_INFO {
           unsigned char SensitiveData;
           unsigned long DataLength;
           [size_is(DataLength)] unsigned char* Data;
       } NLPR_USER_PRIVATE_INFO,
        *PNLPR_USER_PRIVATE_INFO;
       typedef struct _NLPR_MODIFIED_COUNT {
          OLD_LARGE_INTEGER ModifiedCount;
       } NLPR_MODIFIED_COUNT,
        *PNLPR_MODIFIED_COUNT;
       typedef struct _NLPR_QUOTA_LIMITS {
           unsigned long PagedPoolLimit;
           unsigned long NonPagedPoolLimit;
           unsigned long MinimumWorkingSetSize;
           unsigned long MaximumWorkingSetSize;
           unsigned long PagefileLimit;
           OLD_LARGE_INTEGER TimeLimit;
       } NLPR_QUOTA_LIMITS,
        *PNLPR_QUOTA_LIMITS;
       typedef struct _NETLOGON_DELTA_USER {
           UNICODE_STRING UserName;
           UNICODE_STRING FullName;
           unsigned long UserId;
           unsigned long PrimaryGroupId;
           UNICODE_STRING HomeDirectory;
           UNICODE_STRING HomeDirectoryDrive;
           UNICODE_STRING ScriptPath;
           UNICODE_STRING AdminComment;
           UNICODE_STRING Workstations;
           OLD_LARGE_INTEGER LastLogon;
           OLD_LARGE_INTEGER LastLogoff;
           NLPR_LOGON_HOURS LogonHours;
           unsigned short BadPasswordCount;
           unsigned short LogonCount;
           OLD_LARGE_INTEGER PasswordLastSet;
           OLD_LARGE_INTEGER AccountExpires;
           unsigned long UserAccountControl;
           ENCRYPTED_NT_OWF_PASSWORD EncryptedNtOwfPassword;
           ENCRYPTED_LM_OWF_PASSWORD EncryptedLmOwfPassword;
           unsigned char NtPasswordPresent;
           unsigned char LmPasswordPresent;
           unsigned char PasswordExpired;
           UNICODE_STRING UserComment;
           UNICODE_STRING Parameters;
           unsigned short CountryCode;
           unsigned short CodePage;
           NLPR_USER_PRIVATE_INFO PrivateData;
           SECURITY_INFORMATION SecurityInformation;
           unsigned long SecuritySize;
           [size_is(SecuritySize)] unsigned char* SecurityDescriptor;
           UNICODE_STRING ProfilePath;
           UNICODE_STRING DummyString2;
            UNICODE_STRING DummyString3;
            UNICODE_STRING DummyString4;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
       } NETLOGON_DELTA_USER,
         *PNETLOGON_DELTA_USER;
       typedef struct _NETLOGON_DELTA_GROUP {
            UNICODE_STRING Name;
            unsigned long RelativeId;
            unsigned long Attributes;
            UNICODE_STRING AdminComment;
            SECURITY_INFORMATION SecurityInformation;
            unsigned long SecuritySize;
            [size_is(SecuritySize)] unsigned char* SecurityDescriptor;
            UNICODE_STRING DummyString1;
            UNICODE_STRING DummyString2;
            UNICODE_STRING DummyString3;
            UNICODE_STRING DummyString4;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
       } NETLOGON_DELTA_GROUP,
         *PNETLOGON_DELTA_GROUP;
       typedef struct _NETLOGON_DELTA_GROUP_MEMBER {
            [size_is(MemberCount)] unsigned long* Members;
            [size_is(MemberCount)] unsigned long* Attributes;
            unsigned long MemberCount;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
       } NETLOGON_DELTA_GROUP_MEMBER,
         *PNETLOGON_DELTA_GROUP_MEMBER;
       typedef struct _NETLOGON_DELTA_ALIAS {
            UNICODE_STRING Name;
            unsigned long RelativeId;
            SECURITY_INFORMATION SecurityInformation;
            unsigned long SecuritySize;
            [size_is(SecuritySize)] unsigned char* SecurityDescriptor;
            UNICODE_STRING Comment;
            UNICODE_STRING DummyString2;
            UNICODE_STRING DummyString3;
            UNICODE_STRING DummyString4;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
       } NETLOGON_DELTA_ALIAS,
         *PNETLOGON_DELTA_ALIAS;
       typedef struct _NETLOGON_DELTA_ALIAS_MEMBER
       {
            NLPR_SID_ARRAY Members;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
         } NETLOGON_DELTA_ALIAS_MEMBER, *PNETLOGON_DELTA_ALIAS_MEMBER;
       typedef struct _NETLOGON_DELTA_DOMAIN {
            UNICODE_STRING DomainName;
            UNICODE_STRING OemInformation;
            OLD_LARGE_INTEGER ForceLogoff;
            unsigned short MinPasswordLength;
            unsigned short PasswordHistoryLength;
            OLD_LARGE_INTEGER MaxPasswordAge;
            OLD_LARGE_INTEGER MinPasswordAge;
            OLD_LARGE_INTEGER DomainModifiedAccount;
            OLD_LARGE_INTEGER CreationTime;
            SECURITY_INFORMATION SecurityInformation;
            unsigned long SecuritySize;
            [size_is(SecuritySize)] unsigned char* SecurityDescriptor;
            UNICODE_STRING DomainLockoutInformation;
            UNICODE_STRING DummyString2;
            UNICODE_STRING DummyString3;
            UNICODE_STRING DummyString4;
            unsigned long PasswordProperties;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
        } NETLOGON_DELTA_DOMAIN,
          *PNETLOGON_DELTA_DOMAIN;
        typedef struct _NETLOGON_DELTA_RENAME_GROUP
        {
            UNICODE_STRING OldName;
            UNICODE_STRING NewName;
            UNICODE_STRING DummyString1;
            UNICODE_STRING DummyString2;
            UNICODE_STRING DummyString3;
            UNICODE_STRING DummyString4;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
        } NETLOGON_RENAME_GROUP, *PNETLOGON_DELTA_RENAME_GROUP;
        typedef struct _NETLOGON_DELTA_RENAME_USER
        {
            UNICODE_STRING OldName;
            UNICODE_STRING NewName;
            UNICODE_STRING DummyString1;
            UNICODE_STRING DummyString2;
            UNICODE_STRING DummyString3;
            UNICODE_STRING DummyString4;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
        } NETLOGON_RENAME_USER, *PNETLOGON_DELTA_RENAME_USER;
        typedef struct _NETLOGON_DELTA_RENAME_ALIAS
        {
            UNICODE_STRING OldName;
            UNICODE_STRING NewName;
            UNICODE_STRING DummyString1;
            UNICODE_STRING DummyString2;
            UNICODE_STRING DummyString3;
            UNICODE_STRING DummyString4;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
        } NETLOGON_RENAME_ALIAS, *PNETLOGON_DELTA_RENAME_ALIAS;
        typedef struct _NETLOGON_DELTA_POLICY {
           unsigned long MaximumLogSize;
           OLD_LARGE_INTEGER AuditRetentionPeriod;
           unsigned char AuditingMode;
           unsigned long MaximumAuditEventCount;
           [size_is(MaximumAuditEventCount + 1)]
                 unsigned long* EventAuditingOptions;
           UNICODE_STRING PrimaryDomainName;
           PSID PrimaryDomainSid;
           NLPR_QUOTA_LIMITS QuotaLimits;
           OLD_LARGE_INTEGER ModifiedId;
           OLD_LARGE_INTEGER DatabaseCreationTime;
           SECURITY_INFORMATION SecurityInformation;
           unsigned long SecuritySize;
           [size_is(SecuritySize)] unsigned char* SecurityDescriptor;
           UNICODE_STRING DummyString1;
           UNICODE_STRING DummyString2;
           UNICODE_STRING DummyString3;
           UNICODE_STRING DummyString4;
           unsigned long DummyLong1;
           unsigned long DummyLong2;
           unsigned long DummyLong3;
           unsigned long DummyLong4;
       } NETLOGON_DELTA_POLICY,
        *PNETLOGON_DELTA_POLICY;
       typedef struct _NETLOGON_DELTA_TRUSTED_DOMAINS {
           PUNICODE_STRING DomainName;
           unsigned long NumControllerEntries;
           [size_is(NumControllerEntries)]
                 PUNICODE_STRING ControllerNames;
           SECURITY_INFORMATION SecurityInformation;
           unsigned long SecuritySize;
           [size_is(SecuritySize)] unsigned char* SecurityDescriptor;
           UNICODE_STRING DummyString1;
           UNICODE_STRING DummyString2;
           UNICODE_STRING DummyString3;
           UNICODE_STRING DummyString4;
           unsigned long TrustedPosixOffset;
           unsigned long DummyLong2;
           unsigned long DummyLong3;
           unsigned long DummyLong4;
       } NETLOGON_DELTA_TRUSTED_DOMAINS,
        *PNETLOGON_DELTA_TRUSTED_DOMAINS;
       typedef struct _NETLOGON_DELTA_ACCOUNTS {
           unsigned long PrivilegeEntries;
           unsigned long PrivilegeControl;
           [size_is(PrivilegeEntries)] unsigned long* PrivilegeAttributes;
           [size_is(PrivilegeEntries)] PUNICODE_STRING PrivilegeNames;
           NLPR_QUOTA_LIMITS QuotaLimits;
           unsigned long SystemAccessFlags;
           SECURITY_INFORMATION SecurityInformation;
           unsigned long SecuritySize;
           [size_is(SecuritySize)] unsigned char* SecurityDescriptor;
           UNICODE_STRING DummyString1;
           UNICODE_STRING DummyString2;
           UNICODE_STRING DummyString3;
           UNICODE_STRING DummyString4;
           unsigned long DummyLong1;
           unsigned long DummyLong2;
           unsigned long DummyLong3;
           unsigned long DummyLong4;
       } NETLOGON_DELTA_ACCOUNTS,
         *PNETLOGON_DELTA_ACCOUNTS;
       typedef struct _NETLOGON_DELTA_SECRET {
            NLPR_CR_CIPHER_VALUE CurrentValue;
            OLD_LARGE_INTEGER CurrentValueSetTime;
            NLPR_CR_CIPHER_VALUE OldValue;
            OLD_LARGE_INTEGER OldValueSetTime;
            SECURITY_INFORMATION SecurityInformation;
            unsigned long SecuritySize;
            [size_is(SecuritySize)] unsigned char* SecurityDescriptor;
            UNICODE_STRING DummyString1;
            UNICODE_STRING DummyString2;
            UNICODE_STRING DummyString3;
            UNICODE_STRING DummyString4;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
       } NETLOGON_DELTA_SECRET,
         *PNETLOGON_DELTA_SECRET;
       typedef struct _NETLOGON_DELTA_DELETE_GROUP
       {
            [string] wchar_t * AccountName;
            UNICODE_STRING DummyString1;
            UNICODE_STRING DummyString2;
            UNICODE_STRING DummyString3;
            UNICODE_STRING DummyString4;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
       } NETLOGON_DELTA_DELETE_GROUP, *PNETLOGON_DELTA_DELETE_GROUP;
       typedef struct _NETLOGON_DELTA_DELETE_USER
       {
            [string] wchar_t * AccountName;
            UNICODE_STRING DummyString1;
            UNICODE_STRING DummyString2;
            UNICODE_STRING DummyString3;
            UNICODE_STRING DummyString4;
            unsigned long DummyLong1;
            unsigned long DummyLong2;
            unsigned long DummyLong3;
            unsigned long DummyLong4;
       } NETLOGON_DELTA_DELETE_USER, *PNETLOGON_DELTA_DELETE_USER;
       typedef enum _NETLOGON_DELTA_TYPE {
            AddOrChangeDomain = 1,
            AddOrChangeGroup = 2,
            DeleteGroup = 3,
            RenameGroup = 4,
            AddOrChangeUser = 5,
            DeleteUser = 6,
            RenameUser = 7,
            ChangeGroupMembership = 8,
            AddOrChangeAlias = 9,
            DeleteAlias = 10,
            RenameAlias = 11,
            ChangeAliasMembership = 12,
            AddOrChangeLsaPolicy = 13,
            AddOrChangeLsaTDomain = 14,
            DeleteLsaTDomain = 15,
            AddOrChangeLsaAccount = 16,
            DeleteLsaAccount = 17,
            AddOrChangeLsaSecret = 18,
            DeleteLsaSecret = 19,
            DeleteGroupByName = 20,
            DeleteUserByName = 21,
            SerialNumberSkip = 22
       } NETLOGON_DELTA_TYPE;
       typedef
       [switch_type(NETLOGON_DELTA_TYPE)]
       union _NETLOGON_DELTA_UNION {
            [case(AddOrChangeDomain)]
                PNETLOGON_DELTA_DOMAIN DeltaDomain;
            [case(AddOrChangeGroup)]
                PNETLOGON_DELTA_GROUP DeltaGroup;
            [case(RenameGroup)]
                PNETLOGON_DELTA_RENAME_GROUP DeltaRenameGroup;
            [case(AddOrChangeUser)]
               PNETLOGON_DELTA_USER DeltaUser;
            [case(RenameUser)]
               PNETLOGON_DELTA_RENAME_USER DeltaRenameUser;
            [case(ChangeGroupMembership)]
               PNETLOGON_DELTA_GROUP_MEMBER DeltaGroupMember;
            [case(AddOrChangeAlias)]
               PNETLOGON_DELTA_ALIAS DeltaAlias;
            [case(RenameAlias)]
               PNETLOGON_DELTA_RENAME_ALIAS DeltaRenameAlias;
            [case(ChangeAliasMembership)]
               PNETLOGON_DELTA_ALIAS_MEMBER DeltaAliasMember;
            [case(AddOrChangeLsaPolicy)]
               PNETLOGON_DELTA_POLICY DeltaPolicy;
            [case(AddOrChangeLsaTDomain)]
               PNETLOGON_DELTA_TRUSTED_DOMAINS DeltaTDomains;
            [case(AddOrChangeLsaAccount)]
               PNETLOGON_DELTA_ACCOUNTS DeltaAccounts;
            [case(AddOrChangeLsaSecret)]
               PNETLOGON_DELTA_SECRET DeltaSecret;
            [case(DeleteGroupByName)]
               PNETLOGON_DELTA_DELETE_GROUP DeltaDeleteGroup;
            [case(DeleteUserByName)]
               PNETLOGON_DELTA_DELETE_USER DeltaDeleteUser;
            [case(SerialNumberSkip)]
               PNLPR_MODIFIED_COUNT DeltaSerialNumberSkip;
        } NETLOGON_DELTA_UNION,
          *PNETLOGON_DELTA_UNION;
        typedef [switch_type(NETLOGON_DELTA_TYPE)] union
              _NETLOGON_DELTA_ID_UNION
        {
            [case(AddOrChangeDomain,
                  AddOrChangeGroup,
                  DeleteGroup,
                  RenameGroup,
                  AddOrChangeUser,
                  DeleteUser,
                  RenameUser,
                  ChangeGroupMembership,
                  AddOrChangeAlias,
                  DeleteAlias,
                  RenameAlias,
                  ChangeAliasMembership,
                  DeleteGroupByName,
                  DeleteUserByName)] unsigned long Rid;
            [case(AddOrChangeLsaPolicy,
                  AddOrChangeLsaTDomain,
                  DeleteLsaTDomain,
                  AddOrChangeLsaAccount,
                  DeleteLsaAccount)] PSID Sid;
            [case(AddOrChangeLsaSecret,
                  DeleteLsaSecret)] [string] wchar_t* Name;
         } NETLOGON_DELTA_ID_UNION,
          *PNETLOGON_DELTA_ID_UNION;
       typedef struct _NETLOGON_DELTA_ENUM
       {
            NETLOGON_DELTA_TYPE DeltaType;
            [switch_is(DeltaType)] NETLOGON_DELTA_ID_UNION DeltaID;
            [switch_is(DeltaType)] NETLOGON_DELTA_UNION DeltaUnion;
       } NETLOGON_DELTA_ENUM, *PNETLOGON_DELTA_ENUM;
       typedef struct _NETLOGON_DELTA_ENUM_ARRAY {
            DWORD CountReturned;
            [size_is(CountReturned)] PNETLOGON_DELTA_ENUM Deltas;
       } NETLOGON_DELTA_ENUM_ARRAY, *PNETLOGON_DELTA_ENUM_ARRAY;
       typedef struct _NETLOGON_LOGON_IDENTITY_INFO
       {
            UNICODE_STRING LogonDomainName;
            unsigned long ParameterControl;
            OLD_LARGE_INTEGER LogonId;
            UNICODE_STRING UserName;
            UNICODE_STRING Workstation;
       } NETLOGON_LOGON_IDENTITY_INFO, *PNETLOGON_LOGON_IDENTITY_INFO;
       typedef struct _NETLOGON_INTERACTIVE_INFO
       {
            NETLOGON_LOGON_IDENTITY_INFO Identity;
            LM_OWF_PASSWORD LmOwfPassword;
            NT_OWF_PASSWORD NtOwfPassword;
       } NETLOGON_INTERACTIVE_INFO, *PNETLOGON_INTERACTIVE_INFO;
       typedef enum _NETLOGON_LOGON_INFO_CLASS
       {
            NetlogonInteractiveInformation = 1,
            NetlogonNetworkInformation = 2,
            NetlogonServiceInformation = 3,
            NetlogonGenericInformation = 4,
            NetlogonInteractiveTransitiveInformation = 5,
            NetlogonNetworkTransitiveInformation = 6,
            NetlogonServiceTransitiveInformation = 7
       } NETLOGON_LOGON_INFO_CLASS;
       typedef struct _NETLOGON_SERVICE_INFO
       {
            NETLOGON_LOGON_IDENTITY_INFO Identity;
            LM_OWF_PASSWORD LmOwfPassword;
            NT_OWF_PASSWORD NtOwfPassword;
       } NETLOGON_SERVICE_INFO, *PNETLOGON_SERVICE_INFO;
       typedef struct
       {
            char Data[8];
       } LM_CHALLENGE;
       typedef struct _NETLOGON_NETWORK_INFO
       {
            NETLOGON_LOGON_IDENTITY_INFO Identity;
            LM_CHALLENGE LmChallenge;
            STRING NtChallengeResponse;
            STRING LmChallengeResponse;
       } NETLOGON_NETWORK_INFO, *PNETLOGON_NETWORK_INFO;
       typedef struct _NETLOGON_GENERIC_INFO
       {
            NETLOGON_LOGON_IDENTITY_INFO Identity;
            UNICODE_STRING PackageName;
            unsigned long DataLength;
            [size_is(DataLength)] unsigned char * LogonData;
       } NETLOGON_GENERIC_INFO, *PNETLOGON_GENERIC_INFO;
       typedef [switch_type(NETLOGON_LOGON_INFO_CLASS)]
            union _NETLOGON_LEVEL
       {
            [case(NetlogonInteractiveInformation)]
                PNETLOGON_INTERACTIVE_INFO LogonInteractive;
            [case(NetlogonInteractiveTransitiveInformation)]
                PNETLOGON_INTERACTIVE_INFO LogonInteractiveTransitive;
            [case(NetlogonServiceInformation)]
                PNETLOGON_SERVICE_INFO LogonService;
            [case(NetlogonServiceTransitiveInformation)]
                PNETLOGON_SERVICE_INFO LogonServiceTransitive;
            [case(NetlogonNetworkInformation)]
                PNETLOGON_NETWORK_INFO LogonNetwork;
            [case(NetlogonNetworkTransitiveInformation)]
                PNETLOGON_NETWORK_INFO LogonNetworkTransitive;
            [case(NetlogonGenericInformation)]
                PNETLOGON_GENERIC_INFO LogonGeneric;
            [default]
                ;
       } NETLOGON_LEVEL, * PNETLOGON_LEVEL;
       typedef enum _NETLOGON_VALIDATION_INFO_CLASS
       {
            NetlogonValidationUasInfo = 1,
            NetlogonValidationSamInfo = 2,
            NetlogonValidationSamInfo2 = 3,
            NetlogonValidationGenericInfo2 = 5,
            NetlogonValidationSamInfo4 = 6
       } NETLOGON_VALIDATION_INFO_CLASS;
       typedef struct _GROUP_MEMBERSHIP
       {
            unsigned long RelativeId;
            unsigned long Attributes;
       } GROUP_MEMBERSHIP, *PGROUP_MEMBERSHIP;
       typedef struct _USER_SESSION_KEY
       {
            CYPHER_BLOCK Data[2];
       } USER_SESSION_KEY, *PUSER_SESSION_KEY;
       typedef struct _NETLOGON_SID_AND_ATTRIBUTES
       {
            PSID Sid;
            unsigned long Attributes;
       } NETLOGON_SID_AND_ATTRIBUTES,
         *PNETLOGON_SID_AND_ATTRIBUTES;
       typedef struct _NETLOGON_VALIDATION_SAM_INFO
       {
            OLD_LARGE_INTEGER LogonTime;
            OLD_LARGE_INTEGER LogoffTime;
            OLD_LARGE_INTEGER KickOffTime;
            OLD_LARGE_INTEGER PasswordLastSet;
            OLD_LARGE_INTEGER PasswordCanChange;
            OLD_LARGE_INTEGER PasswordMustChange;
            UNICODE_STRING EffectiveName;
            UNICODE_STRING FullName;
            UNICODE_STRING LogonScript;
            UNICODE_STRING ProfilePath;
            UNICODE_STRING HomeDirectory;
            UNICODE_STRING HomeDirectoryDrive;
            unsigned short LogonCount;
            unsigned short BadPasswordCount;
            unsigned long UserId;
            unsigned long PrimaryGroupId;
            unsigned long GroupCount;
            [size_is(GroupCount)] PGROUP_MEMBERSHIP GroupIds;
            unsigned long UserFlags;
            USER_SESSION_KEY UserSessionKey;
            UNICODE_STRING LogonServer;
            UNICODE_STRING LogonDomainName;
            PSID LogonDomainId;
            unsigned long ExpansionRoom[10];
       } NETLOGON_VALIDATION_SAM_INFO,
         *PNETLOGON_VALIDATION_SAM_INFO;
       typedef struct _NETLOGON_VALIDATION_SAM_INFO2
       {
            OLD_LARGE_INTEGER LogonTime;
            OLD_LARGE_INTEGER LogoffTime;
            OLD_LARGE_INTEGER KickOffTime;
            OLD_LARGE_INTEGER PasswordLastSet;
            OLD_LARGE_INTEGER PasswordCanChange;
            OLD_LARGE_INTEGER PasswordMustChange;
            UNICODE_STRING EffectiveName;
            UNICODE_STRING FullName;
            UNICODE_STRING LogonScript;
            UNICODE_STRING ProfilePath;
            UNICODE_STRING HomeDirectory;
            UNICODE_STRING HomeDirectoryDrive;
            unsigned short LogonCount;
            unsigned short BadPasswordCount;
            unsigned long UserId;
            unsigned long PrimaryGroupId;
            unsigned long GroupCount;
            [size_is(GroupCount)] PGROUP_MEMBERSHIP GroupIds;
            unsigned long UserFlags;
            USER_SESSION_KEY UserSessionKey;
            UNICODE_STRING LogonServer;
            UNICODE_STRING LogonDomainName;
            PSID LogonDomainId;
            unsigned long ExpansionRoom[10];
            unsigned long SidCount;
            [size_is(SidCount)] PNETLOGON_SID_AND_ATTRIBUTES ExtraSids;
       } NETLOGON_VALIDATION_SAM_INFO2,
         *PNETLOGON_VALIDATION_SAM_INFO2;
       typedef struct _NETLOGON_VALIDATION_GENERIC_INFO2
       {
            unsigned long DataLength;
            [size_is(DataLength)] unsigned char * ValidationData;
       } NETLOGON_VALIDATION_GENERIC_INFO2,
          *PNETLOGON_VALIDATION_GENERIC_INFO2;
       typedef struct _NETLOGON_VALIDATION_SAM_INFO4
       {
            OLD_LARGE_INTEGER LogonTime;
            OLD_LARGE_INTEGER LogoffTime;
            OLD_LARGE_INTEGER KickOffTime;
            OLD_LARGE_INTEGER PasswordLastSet;
           OLD_LARGE_INTEGER PasswordCanChange;
           OLD_LARGE_INTEGER PasswordMustChange;
           UNICODE_STRING EffectiveName;
           UNICODE_STRING FullName;
           UNICODE_STRING LogonScript;
           UNICODE_STRING ProfilePath;
           UNICODE_STRING HomeDirectory;
           UNICODE_STRING HomeDirectoryDrive;
           unsigned short LogonCount;
           unsigned short BadPasswordCount;
           unsigned long UserId;
           unsigned long PrimaryGroupId;
           unsigned long GroupCount;
          [size_is(GroupCount)] PGROUP_MEMBERSHIP GroupIds;
           unsigned long UserFlags;
           USER_SESSION_KEY UserSessionKey;
           UNICODE_STRING LogonServer;
           UNICODE_STRING LogonDomainName;
           PSID LogonDomainId;
           unsigned long ExpansionRoom[10];
           unsigned long SidCount;
           [size_is(SidCount)] PNETLOGON_SID_AND_ATTRIBUTES ExtraSids;
           UNICODE_STRING DnsLogonDomainName;
           UNICODE_STRING Upn;
           UNICODE_STRING ExpansionString1;
           UNICODE_STRING ExpansionString2;
           UNICODE_STRING ExpansionString3;
           UNICODE_STRING ExpansionString4;
           UNICODE_STRING ExpansionString5;
           UNICODE_STRING ExpansionString6;
           UNICODE_STRING ExpansionString7;
           UNICODE_STRING ExpansionString8;
           UNICODE_STRING ExpansionString9;
           UNICODE_STRING ExpansionString10;
       } NETLOGON_VALIDATION_SAM_INFO4,
         *PNETLOGON_VALIDATION_SAM_INFO4;
       typedef [switch_type(enum _NETLOGON_VALIDATION_INFO_CLASS)]
           union _NETLOGON_VALIDATION {
           [case(NetlogonValidationSamInfo)]
                PNETLOGON_VALIDATION_SAM_INFO ValidationSam;
           [case(NetlogonValidationSamInfo2)]
                PNETLOGON_VALIDATION_SAM_INFO2 ValidationSam2;
           [case(NetlogonValidationGenericInfo2)]
                PNETLOGON_VALIDATION_GENERIC_INFO2 ValidationGeneric2;
           [case(NetlogonValidationSamInfo4)]
                PNETLOGON_VALIDATION_SAM_INFO4 ValidationSam4;
           [default]
                ;
       } NETLOGON_VALIDATION, * PNETLOGON_VALIDATION;
       #define  NETLOGON_CONTROL_REDISCOVER 5
       #define  NETLOGON_CONTROL_TC_QUERY 6
       #define  NETLOGON_CONTROL_CHANGE_PASSWORD 9
       #define  NETLOGON_CONTROL_TC_VERIFY 10
       #define  NETLOGON_CONTROL_SET_DBFLAG 0xFFFE
       #define  NETLOGON_CONTROL_FIND_USER 8
       typedef [switch_type(DWORD)] union
            _NETLOGON_CONTROL_DATA_INFORMATION
       {
           [case(
                NETLOGON_CONTROL_REDISCOVER,
                NETLOGON_CONTROL_TC_QUERY,
                NETLOGON_CONTROL_CHANGE_PASSWORD,
                NETLOGON_CONTROL_TC_VERIFY)] [string] wchar_t *
                      TrustedDomainName;
           [case(NETLOGON_CONTROL_SET_DBFLAG)] DWORD DebugFlag;
           [case(NETLOGON_CONTROL_FIND_USER)] [string] wchar_t *UserName;
           [default]
                ;
       } NETLOGON_CONTROL_DATA_INFORMATION,
         *PNETLOGON_CONTROL_DATA_INFORMATION;
       typedef struct _NETLOGON_INFO_1 {
           DWORD netlog1_flags;
           NET_API_STATUS netlog1_pdc_connection_status;
       } NETLOGON_INFO_1, *PNETLOGON_INFO_1;
       typedef struct _NETLOGON_INFO_2 {
           DWORD netlog2_flags;
           NET_API_STATUS netlog2_pdc_connection_status;
           [string] wchar_t * netlog2_trusted_dc_name;
           NET_API_STATUS netlog2_tc_connection_status;
       } NETLOGON_INFO_2, *PNETLOGON_INFO_2;
       typedef struct _NETLOGON_INFO_3 {
           DWORD netlog3_flags;
           DWORD netlog3_logon_attempts;
           DWORD netlog3_reserved1;
           DWORD netlog3_reserved2;
           DWORD netlog3_reserved3;
           DWORD netlog3_reserved4;
           DWORD netlog3_reserved5;
       } NETLOGON_INFO_3, *PNETLOGON_INFO_3;
       typedef struct _NETLOGON_INFO_4
       {
           [string] wchar_t * netlog4_trusted_dc_name;
           [string] wchar_t * netlog4_trusted_domain_name;
       } NETLOGON_INFO_4, *PNETLOGON_INFO_4;
       typedef [switch_type(DWORD)] union
            _NETLOGON_CONTROL_QUERY_INFORMATION {
           [case(1)] PNETLOGON_INFO_1 NetlogonInfo1;
           [case(2)] PNETLOGON_INFO_2 NetlogonInfo2;
           [case(3)] PNETLOGON_INFO_3 NetlogonInfo3;
           [case(4)] PNETLOGON_INFO_4 NetlogonInfo4;
           [default] ;
       } NETLOGON_CONTROL_QUERY_INFORMATION,
         *PNETLOGON_CONTROL_QUERY_INFORMATION;
       typedef enum _SYNC_STATE
       {
           NormalState = 0,
           DomainState = 1,
           GroupState = 2,
           UasBuiltInGroupState = 3,
           UserState = 4,
           GroupMemberState = 5,
           AliasState = 6,
           AliasMemberState = 7,
           SamDoneState = 8
       }SYNC_STATE, *PSYNC_STATE;
      typedef struct _DOMAIN_NAME_BUFFER {
           unsigned long DomainNameByteCount;
           [unique, size_is(DomainNameByteCount)] unsigned char *
                  DomainNames;
       } DOMAIN_NAME_BUFFER,
        *PDOMAIN_NAME_BUFFER;
       typedef struct _NETLOGON_LSA_POLICY_INFO {
           unsigned long LsaPolicySize;
           [size_is(LsaPolicySize)] unsigned char * LsaPolicy;
       } NETLOGON_LSA_POLICY_INFO,
        *PNETLOGON_LSA_POLICY_INFO;
       typedef struct _NETLOGON_ONE_DOMAIN_INFO {
           UNICODE_STRING DomainName;
           UNICODE_STRING DnsDomainName;
           UNICODE_STRING DnsForestName;
           GUID DomainGuid;
           PSID DomainSid;
           UNICODE_STRING TrustExtension;
           UNICODE_STRING DummyString2;
           UNICODE_STRING DummyString3;
           UNICODE_STRING DummyString4;
           unsigned long DummyLong1;
           unsigned long DummyLong2;
           unsigned long DummyLong3;
           unsigned long DummyLong4;
       } NETLOGON_ONE_DOMAIN_INFO,
        *PNETLOGON_ONE_DOMAIN_INFO;
       typedef struct _NETLOGON_DOMAIN_INFO {
           NETLOGON_ONE_DOMAIN_INFO PrimaryDomain;
           unsigned long TrustedDomainCount;
           [size_is(TrustedDomainCount)] PNETLOGON_ONE_DOMAIN_INFO
                TrustedDomains;
           NETLOGON_LSA_POLICY_INFO LsaPolicy;
           UNICODE_STRING DnsHostNameInDs;
           UNICODE_STRING DummyString2;
           UNICODE_STRING DummyString3;
           UNICODE_STRING DummyString4;
           unsigned long WorkstationFlags;
           unsigned long SupportedEncTypes;
           unsigned long DummyLong3;
           unsigned long DummyLong4;
       } NETLOGON_DOMAIN_INFO, *PNETLOGON_DOMAIN_INFO;
       #define NETLOGON_QUERY_DOMAIN_INFO 1
       #define NETLOGON_QUERY_LSA_POLICY_INFO 2
       typedef [switch_type(DWORD)]
           union _NETLOGON_DOMAIN_INFORMATION {
           [case(NETLOGON_QUERY_DOMAIN_INFO)] PNETLOGON_DOMAIN_INFO
                 DomainInfo;
           [case(NETLOGON_QUERY_LSA_POLICY_INFO)]
                 PNETLOGON_LSA_POLICY_INFO LsaPolicyInfo;
       } NETLOGON_DOMAIN_INFORMATION,
        *PNETLOGON_DOMAIN_INFORMATION;
       typedef struct _NETLOGON_WORKSTATION_INFO {
           NETLOGON_LSA_POLICY_INFO LsaPolicy;
           [string] wchar_t * DnsHostName;
           [string] wchar_t * SiteName;
           [string] wchar_t * Dummy1;
           [string] wchar_t * Dummy2;
           [string] wchar_t * Dummy3;
           [string] wchar_t * Dummy4;
           UNICODE_STRING OsVersion;
           UNICODE_STRING OsName;
           UNICODE_STRING DummyString3;
           UNICODE_STRING DummyString4;
           unsigned long WorkstationFlags;
           unsigned long DummyLong2;
           unsigned long DummyLong3;
           unsigned long DummyLong4;
       } NETLOGON_WORKSTATION_INFO,
        *PNETLOGON_WORKSTATION_INFO;
       typedef [switch_type(DWORD)]
       union _NETLOGON_WORKSTATION_INFORMATION {
           [case(1)] PNETLOGON_WORKSTATION_INFO WorkstationInfo;
           [case(2)] PNETLOGON_WORKSTATION_INFO LsaPolicyInfo;
       } NETLOGON_WORKSTATION_INFORMATION,
        *PNETLOGON_WORKSTATION_INFORMATION;
       typedef struct _NL_SOCKET_ADDRESS {
           [size_is(iSockaddrLength)] unsigned char * lpSockaddr;
           unsigned long iSockaddrLength;
       } NL_SOCKET_ADDRESS,
        *PNL_SOCKET_ADDRESS;
       typedef struct _NL_SITE_NAME_ARRAY {
           unsigned long EntryCount;
           [size_is(EntryCount)] PUNICODE_STRING SiteNames;
       } NL_SITE_NAME_ARRAY,
        *PNL_SITE_NAME_ARRAY;
       typedef struct _DS_DOMAIN_TRUSTSW {
           [string] wchar_t * NetbiosDomainName;
           [string] wchar_t * DnsDomainName;
           unsigned long Flags;
           unsigned long ParentIndex;
           unsigned long TrustType;
           unsigned long TrustAttributes;
           PSID DomainSid;
           GUID DomainGuid;
       } DS_DOMAIN_TRUSTSW,
        *PDS_DOMAIN_TRUSTSW;
       typedef struct _NETLOGON_TRUSTED_DOMAIN_ARRAY {
           DWORD DomainCount;
           [size_is(DomainCount)] PDS_DOMAIN_TRUSTSW Domains;
       } NETLOGON_TRUSTED_DOMAIN_ARRAY,
        *PNETLOGON_TRUSTED_DOMAIN_ARRAY;
       typedef struct _NL_SITE_NAME_EX_ARRAY {
           unsigned long EntryCount;
           [size_is(EntryCount)] PUNICODE_STRING SiteNames;
           [size_is(EntryCount)] PUNICODE_STRING SubnetNames;
       } NL_SITE_NAME_EX_ARRAY,
        *PNL_SITE_NAME_EX_ARRAY;
       typedef struct _NL_GENERIC_RPC_DATA {
           unsigned long UlongEntryCount;
           [size_is(UlongEntryCount)] unsigned long * UlongData;
           unsigned long UnicodeStringEntryCount;
           [size_is(UnicodeStringEntryCount)] PUNICODE_STRING
                 UnicodeStringData;
       } NL_GENERIC_RPC_DATA,
        *PNL_GENERIC_RPC_DATA;
       typedef struct _NETLOGON_VALIDATION_UAS_INFO {
           [string] wchar_t * usrlog1_eff_name;
           DWORD usrlog1_priv;
           DWORD usrlog1_auth_flags;
           DWORD usrlog1_num_logons;
           DWORD usrlog1_bad_pw_count;
           DWORD usrlog1_last_logon;
           DWORD usrlog1_last_logoff;
           DWORD usrlog1_logoff_time;
           DWORD usrlog1_kickoff_time;
           DWORD usrlog1_password_age;
           DWORD usrlog1_pw_can_change;
           DWORD usrlog1_pw_must_change;
           [string] wchar_t * usrlog1_computer;
           [string] wchar_t * usrlog1_domain;
           [string] wchar_t * usrlog1_script_path;
           DWORD usrlog1_reserved1;
       } NETLOGON_VALIDATION_UAS_INFO,
        *PNETLOGON_VALIDATION_UAS_INFO;
       typedef struct _NETLOGON_LOGOFF_UAS_INFO {
           DWORD Duration;
           unsigned short LogonCount;
       } NETLOGON_LOGOFF_UAS_INFORMATION,
        *PNETLOGON_LOGOFF_UAS_INFO;
       typedef [switch_type(DWORD)] union {
           [case(1)] unsigned long Dummy;
      } NETLOGON_DUMMY1, *PNETLOGON_DUMMY1;
       typedef struct _NETLOGON_CREDENTIAL{
           char data[8];
       } NETLOGON_CREDENTIAL,
        *PNETLOGON_CREDENTIAL;
      typedef struct _NETLOGON_AUTHENTICATOR {
           NETLOGON_CREDENTIAL Credential;
           DWORD Timestamp;
       } NETLOGON_AUTHENTICATOR,
        *PNETLOGON_AUTHENTICATOR;
       typedef enum _NETLOGON_SECURE_CHANNEL_TYPE {
           NullSecureChannel = 0,
           MsvApSecureChannel,
           WorkstationSecureChannel,
           TrustedDnsDomainSecureChannel,
           TrustedDomainSecureChannel,
           UasServerSecureChannel,
           ServerSecureChannel,
           CdcServerSecureChannel
       } NETLOGON_SECURE_CHANNEL_TYPE;
       typedef struct _UAS_INFO_0 {
           char ComputerName[16];
           unsigned long TimeCreated;
           unsigned long SerialNumber;
       } UAS_INFO_0, *PUAS_INFO_0;
       typedef struct _DOMAIN_CONTROLLER_INFOW {
           [string,unique] wchar_t *DomainControllerName;
           [string,unique] wchar_t *DomainControllerAddress;
           unsigned long DomainControllerAddressType;
           GUID DomainGuid;
           [string,unique] wchar_t *DomainName;
           [string,unique] wchar_t *DnsForestName;
           unsigned long Flags;
           [string,unique] wchar_t *DcSiteName;
           [string,unique] wchar_t *ClientSiteName;
       } DOMAIN_CONTROLLER_INFOW,
        *PDOMAIN_CONTROLLER_INFOW;
       typedef struct _NL_TRUST_PASSWORD {
            WCHAR Buffer[256];
            unsigned long Length;
       } NL_TRUST_PASSWORD,
         *PNL_TRUST_PASSWORD;
       typedef struct{
           unsigned long ReservedField;
           unsigned long PasswordVersionNumber;
           unsigned long PasswordVersionPresent;
       } NL_PASSWORD_VERSION,
         *PNL_PASSWORD_VERSION;
       typedef enum {
            ForestTrustTopLevelName,
            ForestTrustTopLevelNameEx,
            ForestTrustDomainInfo,
            ForestTrustRecordTypeLast = ForestTrustDomainInfo
       } LSA_FOREST_TRUST_RECORD_TYPE;
       typedef UNICODE_STRING LSA_UNICODE_STRING, *PLSA_UNICODE_STRING;
       typedef struct _LSA_FOREST_TRUST_DOMAIN_INFO {
            PSID Sid;
            LSA_UNICODE_STRING DnsName;
            LSA_UNICODE_STRING NetbiosName;
       } LSA_FOREST_TRUST_DOMAIN_INFO,
         *PLSA_FOREST_TRUST_DOMAIN_INFO;
       typedef struct _LSA_FOREST_TRUST_BINARY_DATA
       {
            [range(0, 131072)] unsigned long Length;
            [size_is( Length )] unsigned char * Buffer;
       } LSA_FOREST_TRUST_BINARY_DATA,
         *PLSA_FOREST_TRUST_BINARY_DATA;
       typedef struct _LSA_FOREST_TRUST_RECORD
       {
            unsigned long Flags;
            LSA_FOREST_TRUST_RECORD_TYPE ForestTrustType;
            LARGE_INTEGER Time;
            [switch_type( LSA_FOREST_TRUST_RECORD_TYPE ), switch_is
                  (ForestTrustType )] union {
            [case( ForestTrustTopLevelName,
                    ForestTrustTopLevelNameEx )] LSA_UNICODE_STRING
                         TopLevelName;
            [case( ForestTrustDomainInfo )] LSA_FOREST_TRUST_DOMAIN_INFO
                         DomainInfo;
            [default] LSA_FOREST_TRUST_BINARY_DATA Data;
            } ForestTrustData;
       } LSA_FOREST_TRUST_RECORD,
         *PLSA_FOREST_TRUST_RECORD;
       typedef struct _LSA_FOREST_TRUST_INFORMATION
       {
            [range(0, 4000)] unsigned long RecordCount;
            [size_is( RecordCount )] PLSA_FOREST_TRUST_RECORD * Entries;
       } LSA_FOREST_TRUST_INFORMATION,
         *PLSA_FOREST_TRUST_INFORMATION;



       NET_API_STATUS
       NetrLogonUasLogon (
            [in,unique,string] LOGONSRV_HANDLE ServerName,
           [in, string] wchar_t * UserName,
           [in, string] wchar_t * Workstation,
           [out] PNETLOGON_VALIDATION_UAS_INFO *ValidationInformation
       );
       NET_API_STATUS
       NetrLogonUasLogoff (
           [in,unique,string] LOGONSRV_HANDLE ServerName,
           [in, string] wchar_t * UserName,
           [in, string] wchar_t * Workstation,
           [out] PNETLOGON_LOGOFF_UAS_INFO LogoffInformation
       );
       NTSTATUS
       NetrLogonSamLogon (
           [in,unique,string] LOGONSRV_HANDLE LogonServer,
           [in,string,unique] wchar_t * ComputerName,
           [in,unique] PNETLOGON_AUTHENTICATOR Authenticator,
           [in,out,unique] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in] NETLOGON_LOGON_INFO_CLASS LogonLevel,
           [in,switch_is(LogonLevel)] PNETLOGON_LEVEL LogonInformation,
           [in] NETLOGON_VALIDATION_INFO_CLASS ValidationLevel,
           [out,switch_is(ValidationLevel)] PNETLOGON_VALIDATION
                 ValidationInformation,
           [out] unsigned char * Authoritative
       );
       NTSTATUS
       NetrLogonSamLogoff (
           [in,unique,string] LOGONSRV_HANDLE LogonServer,
           [in,string,unique] wchar_t * ComputerName,
           [in,unique] PNETLOGON_AUTHENTICATOR Authenticator,
           [in,out,unique] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in] NETLOGON_LOGON_INFO_CLASS LogonLevel,
           [in,switch_is(LogonLevel)] PNETLOGON_LEVEL LogonInformation
       );
       NTSTATUS
       NetrServerReqChallenge (
           [in,unique,string] LOGONSRV_HANDLE PrimaryName,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_CREDENTIAL ClientChallenge,
           [out] PNETLOGON_CREDENTIAL ServerChallenge
       );
       NTSTATUS
       NetrServerAuthenticate (
           [in,unique,string] LOGONSRV_HANDLE PrimaryName,
           [in,string] wchar_t * AccountName,
           [in] NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_CREDENTIAL ClientCredential,
           [out] PNETLOGON_CREDENTIAL ServerCredential
       );
       NTSTATUS
       NetrServerPasswordSet (
           [in,unique,string] LOGONSRV_HANDLE PrimaryName,
           [in,string] wchar_t * AccountName,
           [in] NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_AUTHENTICATOR Authenticator,
           [out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in] PENCRYPTED_NT_OWF_PASSWORD UasNewPassword
       );
       //Server to server only method
       NTSTATUS
       OpnumUnused7 (
           void
       );
       //Server to server only method
       NTSTATUS
       OpnumUnused8 (
           void
       );
      NTSTATUS
      NetrAccountDeltas (
          [in, unique, string] LOGONSRV_HANDLE PrimaryName,
          [in, string] wchar_t * ComputerName,
          [in] PNETLOGON_AUTHENTICATOR Authenticator,
          [in,out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
          [in] PUAS_INFO_0 RecordId,
          [in] DWORD Count,
          [in] DWORD Level,
          [out, size_is(BufferSize)] unsigned char * Buffer,
          [in] DWORD BufferSize,
          [out] unsigned long * CountReturned,
          [out] unsigned long * TotalEntries,
          [out] PUAS_INFO_0 NextRecordId
      );
      NTSTATUS
      NetrAccountSync (
          [in, unique, string] LOGONSRV_HANDLE PrimaryName,
          [in, string] wchar_t * ComputerName,
          [in] PNETLOGON_AUTHENTICATOR Authenticator,
          [in,out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
          [in] DWORD Reference,
          [in] DWORD Level,
          [out, size_is(BufferSize) ] unsigned char * Buffer,
          [in] DWORD BufferSize,
          [out] unsigned long * CountReturned,
          [out] unsigned long * TotalEntries,
          [out] unsigned long * NextReference,
       [out] PUAS_INFO_0 LastRecordId
       );
       NET_API_STATUS
       NetrGetDCName (
           [in, string] LOGONSRV_HANDLE ServerName,
           [in, unique, string] wchar_t *DomainName,
           [out, string] wchar_t **Buffer
       );
       NET_API_STATUS
       NetrLogonControl(
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in] DWORD FunctionCode,
           [in] DWORD QueryLevel,
           [out,switch_is(QueryLevel)]
                 PNETLOGON_CONTROL_QUERY_INFORMATION Buffer
       );
       NET_API_STATUS
       NetrGetAnyDCName (
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in, unique, string] wchar_t *DomainName,
           [out, string] wchar_t **Buffer
       );
       NET_API_STATUS
       NetrLogonControl2(
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in] DWORD FunctionCode,
           [in] DWORD QueryLevel,
           [in,switch_is(FunctionCode)]
                 PNETLOGON_CONTROL_DATA_INFORMATION Data,
           [out,switch_is(QueryLevel)]
                 PNETLOGON_CONTROL_QUERY_INFORMATION Buffer
       );
       NTSTATUS
       NetrServerAuthenticate2 (
           [in,unique,string] LOGONSRV_HANDLE PrimaryName,
           [in,string] wchar_t * AccountName,
           [in] NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_CREDENTIAL ClientCredential,
           [out] PNETLOGON_CREDENTIAL ServerCredential,
           [in,out] unsigned long * NegotiateFlags
       );
       NTSTATUS
       NetrDatabaseSync2 (
           [in, string] LOGONSRV_HANDLE PrimaryName,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_AUTHENTICATOR Authenticator,
           [in,out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in] DWORD DatabaseID,
           [in] SYNC_STATE RestartState,
           [in, out] unsigned long * SyncContext,
           [out] PNETLOGON_DELTA_ENUM_ARRAY *DeltaArray,
           [in] DWORD PreferredMaximumLength
       );
       NTSTATUS
       NetrDatabaseRedo(
           [in, string] LOGONSRV_HANDLE PrimaryName,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_AUTHENTICATOR Authenticator,
           [in,out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in, size_is(ChangeLogEntrySize)] unsigned char * ChangeLogEntry,
           [in] DWORD ChangeLogEntrySize,
           [out] PNETLOGON_DELTA_ENUM_ARRAY *DeltaArray
       );
       NET_API_STATUS
       NetrLogonControl2Ex(
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in] DWORD FunctionCode,
           [in] DWORD QueryLevel,
           [in,switch_is(FunctionCode)]
                 PNETLOGON_CONTROL_DATA_INFORMATION Data,
           [out,switch_is(QueryLevel)]
                 PNETLOGON_CONTROL_QUERY_INFORMATION Buffer
       );
       NTSTATUS
       NetrEnumerateTrustedDomains (
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [out] PDOMAIN_NAME_BUFFER DomainNameBuffer
       );
       NET_API_STATUS
       DsrGetDcName(
           [in, unique, string ] LOGONSRV_HANDLE ComputerName,
           [in, unique, string] wchar_t * DomainName,
           [in, unique] GUID *DomainGuid,
           [in, unique] GUID *SiteGuid,
           [in] unsigned long Flags,
           [out] PDOMAIN_CONTROLLER_INFOW *DomainControllerInfo
       );
       //This method not used on the wire
       NTSTATUS
       NetrLogonDummyRoutine1(
           [in, string] LOGONSRV_HANDLE ServerName,
           [in, string, unique] wchar_t* ComputerName,
           [in] PNETLOGON_AUTHENTICATOR Authenticator,
           [in, out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in] DWORD QueryLevel,
           [out, switch_is(QueryLevel)] PNETLOGON_DUMMY1 Buffer
       );
       NTSTATUS
       NetrLogonSetServiceBits(
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in] DWORD ServiceBitsOfInterest,
           [in] DWORD ServiceBits
       );
       NET_API_STATUS
       NetrLogonGetTrustRid(
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in,string,unique] wchar_t * DomainName,
           [out] unsigned long * Rid
       );
       NET_API_STATUS
       NetrLogonComputeServerDigest(
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in] unsigned long Rid,
           [in, size_is(MessageSize)] unsigned char * Message,
           [in] unsigned long MessageSize,
           [out] char NewMessageDigest[16],
           [out] char OldMessageDigest[16]
       );
       NET_API_STATUS
       NetrLogonComputeClientDigest(
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in,string,unique] wchar_t * DomainName,
           [in, size_is(MessageSize)] unsigned char * Message,
           [in] unsigned long MessageSize,
           [out] char NewMessageDigest[16],
           [out] char OldMessageDigest[16]
       );
       NTSTATUS
       NetrServerAuthenticate3 (
           [in,unique,string] LOGONSRV_HANDLE PrimaryName,
           [in,string] wchar_t * AccountName,
           [in] NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_CREDENTIAL ClientCredential,
           [out] PNETLOGON_CREDENTIAL ServerCredential,
           [in,out] unsigned long * NegotiateFlags,
           [out] unsigned long * AccountRid
       );
       NET_API_STATUS
       DsrGetDcNameEx(
           [in, unique, string ] LOGONSRV_HANDLE ComputerName,
           [in, unique, string] wchar_t * DomainName,
           [in, unique] GUID *DomainGuid,
           [in, unique, string] wchar_t * SiteName,
           [in] unsigned long Flags,
           [out] PDOMAIN_CONTROLLER_INFOW *DomainControllerInfo
       );
       NET_API_STATUS
       DsrGetSiteName(
           [in, unique, string ] LOGONSRV_HANDLE ComputerName,
           [out, string] wchar_t **SiteName
       );
       NTSTATUS
       NetrLogonGetDomainInfo(
           [in, string] LOGONSRV_HANDLE ServerName,
           [in,string,unique] wchar_t * ComputerName,
           [in] PNETLOGON_AUTHENTICATOR Authenticator,
           [in,out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in] DWORD Level,
           [in,switch_is(Level)] PNETLOGON_WORKSTATION_INFORMATION
                 WkstaBuffer,
           [out,switch_is(Level)] PNETLOGON_DOMAIN_INFORMATION DomBuffer
       );
       NTSTATUS
       NetrServerPasswordSet2 (
           [in,unique,string] LOGONSRV_HANDLE PrimaryName,
           [in,string] wchar_t * AccountName,
           [in] NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_AUTHENTICATOR Authenticator,
           [out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in] PNL_TRUST_PASSWORD ClearNewPassword
       );
       NTSTATUS
       NetrServerPasswordGet (
           [in,unique,string] LOGONSRV_HANDLE PrimaryName,
           [in,string] wchar_t * AccountName,
           [in] NETLOGON_SECURE_CHANNEL_TYPE AccountType,
           [in, string] wchar_t * ComputerName,
       [in] PNETLOGON_AUTHENTICATOR Authenticator,
       [out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
       [out] PENCRYPTED_NT_OWF_PASSWORD EncryptedNtOwfPassword
       );
       NTSTATUS
       NetrLogonSendToSam (
           [in,unique,string] LOGONSRV_HANDLE PrimaryName,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_AUTHENTICATOR Authenticator,
           [out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in,size_is(OpaqueBufferSize)] unsigned char * OpaqueBuffer,
           [in] unsigned long OpaqueBufferSize
       );
       NET_API_STATUS
       DsrAddressToSiteNamesW(
           [in,unique,string] LOGONSRV_HANDLE ComputerName,
           [in, range(0,32000)] DWORD EntryCount,
           [in,size_is(EntryCount)] PNL_SOCKET_ADDRESS SocketAddresses,
           [out] PNL_SITE_NAME_ARRAY *SiteNames
       );
       NET_API_STATUS
       DsrGetDcNameEx2(
           [in, unique, string ] LOGONSRV_HANDLE ComputerName,
           [in, unique, string] wchar_t * AccountName,
           [in] unsigned long AllowableAccountControlBits,
           [in, unique, string] wchar_t * DomainName,
           [in, unique] GUID *DomainGuid,
           [in, unique, string] wchar_t * SiteName,
           [in] unsigned long Flags,
           [out] PDOMAIN_CONTROLLER_INFOW *DomainControllerInfo
       );
       NET_API_STATUS
       NetrLogonGetTimeServiceParentDomain(
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [out, string] wchar_t **DomainName,
           [out] int * PdcSameSite
       );
       NET_API_STATUS
       NetrEnumerateTrustedDomainsEx (
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [out] PNETLOGON_TRUSTED_DOMAIN_ARRAY Domains
       );
       NET_API_STATUS
       DsrAddressToSiteNamesExW(
           [in,unique,string] LOGONSRV_HANDLE ComputerName,
           [in, range(0,32000)] DWORD EntryCount,
           [in,size_is(EntryCount)] PNL_SOCKET_ADDRESS SocketAddresses,
           [out] PNL_SITE_NAME_EX_ARRAY *SiteNames
       );
       NET_API_STATUS
       DsrGetDcSiteCoverageW(
           [in,unique,string] LOGONSRV_HANDLE ServerName,
           [out] PNL_SITE_NAME_ARRAY *SiteNames
       );
       NTSTATUS
       NetrLogonSamLogonEx (
           [in] handle_t ContextHandle,
           [in,unique,string] wchar_t * LogonServer,
           [in,unique,string] wchar_t * ComputerName,
           [in] NETLOGON_LOGON_INFO_CLASS LogonLevel,
           [in,switch_is(LogonLevel)] PNETLOGON_LEVEL LogonInformation,
           [in] NETLOGON_VALIDATION_INFO_CLASS ValidationLevel,
           [out,switch_is(ValidationLevel)] PNETLOGON_VALIDATION
                 ValidationInformation,
           [out] unsigned char * Authoritative,
           [in,out] unsigned long * ExtraFlags
       );
       NET_API_STATUS
       DsrEnumerateDomainTrusts (
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in] unsigned long Flags,
           [out] PNETLOGON_TRUSTED_DOMAIN_ARRAY Domains
       );
       NET_API_STATUS
       DsrDeregisterDnsHostRecords (
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in, unique, string] wchar_t * DnsDomainName,
           [in, unique] GUID *DomainGuid,
           [in, unique] GUID *DsaGuid,
           [in, string] wchar_t * DnsHostName
       );
       NTSTATUS
       NetrServerTrustPasswordsGet (
           [in,unique,string] LOGONSRV_HANDLE TrustedDcName,
           [in,string] wchar_t * AccountName,
           [in] NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_AUTHENTICATOR Authenticator,
           [out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [out] PENCRYPTED_NT_OWF_PASSWORD EncryptedNewOwfPassword,
           [out] PENCRYPTED_NT_OWF_PASSWORD EncryptedOldOwfPassword
       );
       NET_API_STATUS
       DsrGetForestTrustInformation(
           [in, unique, string] LOGONSRV_HANDLE ServerName,
           [in, unique, string] wchar_t* TrustedDomainName,
           [in] DWORD Flags,
           [out] PLSA_FOREST_TRUST_INFORMATION* ForestTrustInfo
       );
       NTSTATUS
       NetrGetForestTrustInformation (
           [in,unique,string] LOGONSRV_HANDLE ServerName,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_AUTHENTICATOR Authenticator,
           [out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in] DWORD Flags,
           [out] PLSA_FOREST_TRUST_INFORMATION * ForestTrustInfo
       );
       NTSTATUS
       NetrLogonSamLogonWithFlags (
           [in,unique,string] LOGONSRV_HANDLE LogonServer,
           [in,string,unique] wchar_t * ComputerName,
           [in,unique] PNETLOGON_AUTHENTICATOR Authenticator,
           [in,out,unique] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [in] NETLOGON_LOGON_INFO_CLASS LogonLevel,
           [in,switch_is(LogonLevel)] PNETLOGON_LEVEL LogonInformation,
           [in] NETLOGON_VALIDATION_INFO_CLASS ValidationLevel,
           [out,switch_is(ValidationLevel)] PNETLOGON_VALIDATION
                 ValidationInformation,
           [out] unsigned char * Authoritative,
           [in,out] unsigned long * ExtraFlags
       );
       NTSTATUS
       NetrServerGetTrustInfo (
           [in,unique,string] LOGONSRV_HANDLE TrustedDcName,
           [in,string] wchar_t * AccountName,
           [in] NETLOGON_SECURE_CHANNEL_TYPE SecureChannelType,
           [in, string] wchar_t * ComputerName,
           [in] PNETLOGON_AUTHENTICATOR Authenticator,
           [out] PNETLOGON_AUTHENTICATOR ReturnAuthenticator,
           [out] PENCRYPTED_NT_OWF_PASSWORD EncryptedNewOwfPassword,
           [out] PENCRYPTED_NT_OWF_PASSWORD EncryptedOldOwfPassword,
      [out] PNL_GENERIC_RPC_DATA *TrustInfo
           );
  //Server to server only method
  NTSTATUS
  OpnumUnused47 (
      void
  );
  //Server to server only method
  NTSTATUS
  OpnumUnused48 (
      void
  );
  //Server to server only method
  NTSTATUS
  OpnumUnused49 (
      void
  );
  }



  
