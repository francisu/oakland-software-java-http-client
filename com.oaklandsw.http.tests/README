Building and Running the tests

0) turn off automatic build in eclipse to make sure it does not interfere
   with the build script
1) run the build.sh script in com.oaklandsw.http using JDK 1.4 (or higher) on Linux
2) test with JDK 1.4, 1.5, and 1.6 using run.sh com.oaklandsw.http.tests
3) test with JDK 1.2 on windows using runw.sh
4) test the source build by unziping it and running 'ant', then the runsrcsample.sh script
5) test the runtime build by unzipping it and running the com.oaklandsw.http.tests/runlocalsample.sh
6) as above, but with eval build, make sure it shows eval message (delete ~/.xmlfuoshc file first)
7) see the release checklist for finishing the release (website, swreg, pad, etc)


Manual IIS Tests
----------------------------------------------------------

There are two configurations that have to be tested with the NTLM authentication settings:

These have differences in the Local Security Settings which can be accessed from
Local Security Policy in Administrative Tools (Control Panel).  Within that, 
specify Local Policies -> Security Options.

In all cases, the Network Access: Sharing and security for local accounts needs to be
set to "classic".

1) NTLM V2 required  (set the oaklandsw.requirentlmv2) property
- First set "Network security: Minimum session security for NTLM SSP 
based (including secure RPC) servers" to require NTLM V2.
- Then set (and the order is important) the LAN Manager Authentication level to something
different, apply it, and then set it to the highest level.

2) NTLM V2 not required (don't set the oaklandsw.requirentlmv2 property)
- First set "Network security: Minimum session security for NTLM SSP 
based (including secure RPC) servers" to *not* require NTLM V2.
- Then set (and the order is important) the LAN Manager Authentication level to something
different, apply it, and then set it level 1 (use NTLMv2 if negociated).


Run all of the HTTP tests with both configurations; they should all pass.


Running the tests, and setting up software for the tests.
----------------------------------------------------------

First, you will need to make sure you have the following servers
running:

Window machine - default is repoman
Linux machine - default is berlioz

All of these ports and hosts are controlled by properties, see the HttpTestEnv file.

Port  Server

80    	Apache (this must be configured as a proxy server on port 80)
80		IIS (windows)
8080  	Tomcat 5.x (linux)
8085  	Tomcat 3.2 (not presently used)
8086  	Error Server (linux)

8088 	NetProxy (windows)
8089  	Apache (as proxy server) (linux)

3128  	Squid (linux)


Instructions for each type of server:

SQUID - port 3128

The machine to use for the non-squid is set by the nogoop.localhost property, 
which defaults to localhost.

The machine to use for squid is set by nogoop.squidhost property which defaults to berlioz.

In the squid.conf file, you may need to set visible_hostname to be 'berlioz', as squid
expects to find a fully qualified hostname.

Also, add the line "no_cache deny all" somewhere after the acl definitions.  This
turns off caching, which is essential for things like DAV

Start Squid by using /etc/rc.d/rc4.d/K25squid


HTTPD - ports 80, 8089

This is expected to be the standard webserver and the authenticated proxy server.

Setting up Apache Auth Proxy server (port 8089)
    public static int     TEST_AUTH_PROXY_PORT           = 8089;

Set up a virtual host for port 8089, pointing to a password file (testProxyPasswords)
containing the following user/password:
    public static String  TEST_AUTH_PROXY_USER           = "testProxy";
    public static String  TEST_AUTH_PROXY_PASSWORD       = "test839Proxy";
    
Be sure and specify the "listen" directive for the auth proxy port.

This is also used for the WebDAV testing.  There are parts of the httpd.conf
file that point WebDAV to the right document root which is called "dav" in htdocs.

Start httpd by using /etc/rc.d/rc4.d/K15httpd


TOMCAT - port 8080

This is installed in /usr/local/apache-tomcat.  Port 8080 is the default tomcat port.

Test deployment to the tomcat server.

The com.oaklandsw.http.servlet package in the tests gets built into the oaklandsw.war by the 
http-war ant target.

Put this in the webapp directory of the tomcat installation (typically
on repoman) and restart the cat.  Make sure you delete the oaklandsw directory
before you restart the cat.

The oaklandsw.war file is checked in to make things easier.


Axis

This uses Axis V1.4 (any 1.x after that is fine).  Axis2 is not presently used, even though
it may be installed.

The tests depend on Axis being installed on the webapp (above) Tomcat in the axis
directory.

The com.oaklandsw.http.webservice package contains the web services to be deployed for testing.
None are used right now, testing is done only with the Axis built-in services.

The webservice2 package is setup for Axis2 and is not currently used.

Tomcat must be manually started using /usr/local/apache-tomcat/bin/startup.sh.


IIS - windows port 80

Install IIS by going to add/remove programs and installing a windows component.

The test application is simply the Form_JScript.asp sample that comes with IIS.
Move this to the root directory for the server.

The test web service application is in iiswebservice/HelloWorld.asmx.  Just
put this in the root directory for the server.

Make sure the name of the server is correct in iiswebservice/HelloWorld.wsdl.

IIS should be started on the boot of the windows machine.


ERROR SERVER - port 8086

This is just a java program called com.oaklandsw.http.tests.server.ErrorServer.


NETPROXY (on Windows):

Download from the netproxy site, set the port number in the configuration, 
and enable www proxying.

Be sure and turn off the firewall, set incoming to accept all connections.

start -> netproxy -> netproxy configuration.

Ignore errors about evaluation period having expired.

This can be installed as an NT service and started automatically.  Do this.



OTHER

To use different implementations of the HTTP client, specify

-Dsun - sun implementation
-Dinno - innovation.ch implementation









